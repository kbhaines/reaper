desc:VSL SE Velocity Dynamics V3
slider1:attack_time=2<0,16>Attack Time (beats, 0=disable plugin)
slider2:max_attack_time=4<0,16>Max Attack Time (beats)
slider3:attack_time_cc=19<0,127>Attack Time CC
slider4:resolution=50<10,200>Resolution (ms)
//slider5:attack_range=0<0,127>Attack Range Limiter (0=off)

slider7:dynamic_cc=2<0,127>Dynamic Input CC
slider8:target_cc=2<0,127>Target CC to Control
slider9:art_type=0<0,2,1{C1/C2,C1/C7 (Cello),C6/C7}>Articulation KS Config

@slider
dim1=(art_type < 2 ? 24 : 84);
dim2=(art_type == 0 ? 36 : 96);

@init
//state machine state values
st_init=0;
st_pre_attack=1;
st_attack=2;
st_post_attack=3;
st_decay=4;
st_hold_for_notation = 5;

// state machine state
state=st_init;

target_dyn=64;
current_dyn = 0;
notes_on=0;
 
// Keyswitch constants. These encode in 2x 4 bits, dimension 1
// is in the upper 4 bits and range 0-15 (0=C1, for example). 
// Dimension 2 is in the lower 4 bits, and range 0 to 15.
// So 0x21 = notes D1 + C#2 in an instrument with C1/C2 style 
// keyswitches. It's harlmess to send an unused dimension note.
ks_col_legno = $x52;
ks_con_sord = $x81;
ks_con_sord_marc = $x82;
ks_con_sord_stac = $x80;
ks_con_sord_trem = $x83;
ks_detache = $x02;
ks_detache_short = $x01;
ks_dyn_sfz_trem = $x31;
ks_fortepiano = $x32;
ks_fortepiano_trem = $x33;
ks_harmonics = $x61;
ks_harmonics_marc = $x62;
ks_harmonics_stac = $x60;
ks_leg_leg = $x20;
ks_leg_port = $x21;
ks_leg_sus = $x21;
ks_legato_rep = $x2;
ks_long_marc = $x11;
ks_long_sus = $x10;
ks_long_trem = $x12;
ks_pizz = $x50;
ks_pizz = $x50;
ks_portato = $x01;
ks_rep150 = $x44;
ks_rep170 = $x45;
ks_rep190 = $x46;
ks_sfz = $x30;
ks_short_stac = $x0;
ks_snap_pizz = $x51;
ks_staccato_rep = $x3;
ks_str_legato_rep = $x3;
ks_str_spiccato_rep = $x4;
ks_sul_pont = $x71;
ks_sul_pont_marc = $x72;
ks_sul_pont_stac = $x70;
ks_sul_pont_trem = $x73;
ks_trem_marc = $x41;
ks_trem_trem = $x40;
ks_trill = $x42;
ks_whole_trill = $x43;

function is_note_off(msg1, msg3) (
  msg1 == $x80 || (msg1 == $x90 && msg3 == 0);
);

function is_note_on(msg1, msg3) (
  msg1 == $x90 && msg3 > 0;
);

function is_notation_event(msg1, msg2, midi_str) (
  msg1 == $xFF && msg2 == $x0F ? (
    match("*custom*", midi_str) || match("*ornamnent*", midi_str) ||
      match("*articulation*", midi_str);
  ) : 0;
);

function blip_note(offset, note) (
  midisend(offset, $x90, note, 127);
  midisend(offset, $x80, note, 0);
);

function set_ks_from_pc(offset, pc) (
    blip_note(offset, dim1 + (pc >> 4));
    d2 = pc & 15; 
    blip_note(offset, dim2 + d2);
);

@slider
samples_per_cycle = resolution * (srate / 1000);
decay_per_cycle = rebreath_time * (srate / 1000);

@block
while (midirecv_str(offset,#midi_str)) (
  msg1 = str_getchar(#midi_str, 0);
  msg2 = str_getchar(#midi_str, 1);
  msg3 = str_getchar(#midi_str, 2);
  
  msg1 == $xb0 && msg2 == attack_time_cc ? (
    attack_time = (max_attack_time*( msg3 / 127));
  )
  : attack_time == 0 ? (
    state = st_init;
    midisend(offset,msg1,msg2,msg3); // passthrough other events
  )
  : msg1 == $xb0 && msg2 == dynamic_cc ? (
    target_dyn = msg3;
    state == st_post_attack ? midisend(offset, msg1, target_cc, msg3);
  )
  : state == st_init && is_notation_event(msg1, msg2, #midi_str) ? (
    state = st_hold_for_notation;
    midisend_str(offset, #midi_str);
  )
  :state == st_hold_for_notation && is_note_on(msg1, msg3) ? (
    state = st_init;
    midisend(offset, msg1, msg2, msg3);
  )
  : msg1==$x90 && msg3!=0 ? (
    state == st_init ? (
      set_ks_from_pc(offset, ks_long_sus);
      notes_on = 1;
      state=st_attack;
      start_dyn = msg3;
      beats_per_second = tempo / 60.0;
      samples_needed = floor((attack_time / beats_per_second) * srate);
      samples_left = samples_needed;
      sample_block_counter = 0;
      //sample_counter  = samples_per_cycle * (attack_time / (tempo / ts_denom / 60.0));
    )
    : state == st_attack || state == st_post_attack ? (
      notes_on+=1;
      set_ks_from_pc(offset, ks_leg_leg);
    );
//    : target_dyn < 20 && msg3 > 100 ? pc(ks_sfz)
//    : target_dyn < 20 && msg3 < 100 ? pc(ks_fortepiano)
//    : (
    midisend(offset, msg1, msg2, msg3);
  ) : is_note_off(msg1, msg3) && state!=st_init ? (
    notes_on-=1;
    notes_on==0 ? (
      state=st_init;
      decay_samples = 0;
    );
    midisend(offset, msg1, msg2, msg3);
  ) : (
    midisend(offset,msg1,msg2,msg3); // passthrough other events
  );
);
    

@sample
state == st_attack && !samples_left ? (
  state = st_post_attack;
) 
: state == st_attack && sample_block_counter ? (
  sample_block_counter -= 1;
  samples_left -= 1;
) 
: state == st_attack ? (
  f = 1-(samples_left/samples_needed);
  new_dynamic = (target_dyn - start_dyn) * f + start_dyn;
  midisend(0, $xb0, target_cc, new_dynamic);
  sample_block_counter = floor( samples_per_cycle * (attack_time / (tempo / 60.0)));
  samples_left -= 1;
)
: state == st_decay ? (
  decay_samples -=1;
  state = decay_samples ? st_decay : st_init;
);

