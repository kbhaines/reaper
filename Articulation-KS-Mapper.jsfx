desc:Articulation KS Mapper
in_pin:none
out_pin:none

slider1:/articulation-maps:vsl-special-vi14.txt:Articulation Map
slider2:use_default=0<0,1,1{Off,On}>Use first articulation as the default

@slider

@init
ext_midi_bus = 1.0;

max_articulations = 50;
arts_loaded = 0;

// Store in global string array
art_match_strings = 1;
art_keys_str = art_match_strings + max_articulations;

// KS midi are 4 byte numbers representing the max 4 key switch notes
// in order from High to Low byte
articulation_ks_midi = 1;

function blip_note(offset, note) (
  midisend(offset, $x90, note, 127);
  midisend(offset, $x80, note, 0);
);

function parse_note_seq(note_seq) 
  local(seq, note, oct, acc, i, rest) (
  acc = 0;
  i = 0;
  strcpy(seq, note_seq);
  while (strlen(seq) > 1 && i < 4) (
    match("C%d%0s", seq, oct, #rest)  ? ( note = 0 ):
    match("C#%d%0s", seq, oct, #rest) ? ( note = 1 ):
  
    match("D%d%0s", seq, oct, #rest)  ? ( note = 2 ):
    match("D#%d%0s", seq, oct, #rest) ? ( note = 3 ):
  
    match("E%d%0s", seq, oct, #rest)  ? ( note = 4 ):
    match("F%d%0s", seq, oct, #rest)  ? ( note = 5 ):
    match("F#%d%0s", seq, oct, #rest) ? ( note = 6 ):
  
    match("G%d%0s", seq, oct, #rest)  ? ( note = 7 ):
    match("G#%d%0s", seq, oct, #rest) ? ( note = 8 ):
    match("A%d%0s", seq, oct, #rest)  ? ( note = 9 ):
    match("A#%d%0s", seq, oct, #rest) ? ( note = 10 ):
    match("B%d%0s", seq, oct, #rest)  ? ( note = 11 ): (note = 99);

    strcpy(seq, #rest);
    acc += (1 + note + (oct + 1) * 12) << (i * 8);
    i+=1;
  );
  acc;
);

function load_arts() local (handle, i, art_str, keys, art_name) (

  // TODO: File change/reload logic
  strcpy_fromslider(#art_filename, slider1);
  !((handle = file_open(#art_filename)) < 0) ? ( // file_open successful
    i = 0;
    while (file_string(handle,#art_str) > 0) (
      match("%S %s\n*",#art_str,#keys,#art_name) ||
      match("%S %s\r*",#art_str,#keys,#art_name) ? (
        strcpy(art_match_strings+i, #art_name);
        strcpy(art_keys_str+i, #keys);
        articulation_ks_midi[i] = parse_note_seq(#keys);
        i += 1;
      );
    );
    file_close(handle);
    arts_loaded = i;
  );
);

function parse_notation(txt)local(art_match, scan, note_art) (
  art_match = -1;
  match("NOTE %d %d %s", txt, n1, n2, #note_art) ? (
    scan = 0;
    while (scan < arts_loaded && (art_match < 0)) (
      //#tmps = art_match_strings + scan;
      //#tmpy = art_keys_str + scan;
      
      match(art_match_strings + scan, #note_art) ? 
        art_match = scan; //articulation_ks_midi[scan];
      scan += 1;
    );
  );
  art_match;
);


ACTIVE_ART = -1;
STATE_REST = 0;
STATE_ART_SENT = 1;
STATE_NOTE_SENT = 2;

STATE = STATE_REST;

function is_text_evt(msg1, msg2) (
  msg1 == $xFF && msg2 == $x0F;
);


function is_note_on(msg1) (
  (msg1 & $xF0) == $x90;
);

function send_ks_for_articulation(offset, art_no) (
  ks_midi = articulation_ks_midi[art_no];
  sprintf(#ks_xx, "%X", ks_midi);
  while (ks_midi) (
  // TODO  -1?
    blip_note(offset, (ks_midi & $xFF)-1);
    ks_midi = ks_midi >> 8;
  );
  ACTIVE_ART = art_no;
);

function set_articulation(offset, str) local (msg1) (
  strcpy_from(#msg, #str, 2);
  new_art = parse_notation(#msg);
  (new_art >=0 && new_art != ACTIVE_ART) ? (
    ACTIVE_ART = new_art;
    send_ks_for_articulation(offset, new_art);
    1;
  ) : 0;
);

@slider
load_arts();

// TEST DATA
//test_pn = parse_notation("NOTE 0 61 phrase 1 slur begin");
//sprintf(#test_pnh, "%X", test_pn);
//#test_pnh_expected = "191B0000";
//sprintf(#test_pns, "%X", parse_note_seq("C-1C2C3F#0"));
//#test_pns_expected = "1253113";

@block
while (midirecv_str(offset, #str)) (
  msg1 = str_getchar(#str, 0);
  msg2 = str_getchar(#str, 1);
  msg3 = str_getchar(#str, 2);
  
  (STATE == STATE_REST) ? (
    is_text_evt(msg1, msg2) ? (
      set_articulation(offset, #str) && STATE=STATE_ART_SENT;
    ): is_note_on(msg1) && use_default ? (
      send_ks_for_articulation(offset, 0);
    );
  ): (STATE == STATE_ART_SENT) ? (
    is_note_on(msg1) && STATE=STATE_NOTE_SENT;
  ): (STATE == STATE_NOTE_SENT) ? (
    is_text_evt(msg1, msg2) ? (
      set_articulation(offset, #str);
      STATE=STATE_ART_SENT;
    ): is_note_on(msg1) && use_default ? (
      send_ks_for_articulation(offset, 0);
    );
    STATE = STATE_REST;
  );
  midisend_str(offset, #str);
);

@gfx 360 360
margin_left = 20;
margin_top = 10;

arts_loaded > 0 ? ( 
  gfx_setfont(1, "arial", 12, 'b');
  gfx_a = 1;
  gfx_r = gfx_g = gfx_b = 1;
  gfx_x = margin_left;
  gfx_y = margin_top;
  gfx_printf("%d articulations loaded\n", arts_loaded);
  i = 0;
  loop(arts_loaded,
    gfx_x = margin_left;
    gfx_y = margin_top + (i + 1) * (gfx_texth + 5);
    gfx_drawstr(art_keys_str + i);
    gfx_x = 100;
    gfx_drawstr(art_match_strings + i);
    i == ACTIVE_ART ? (
      gfx_g = gfx_b = 0;
      gfx_a = 0.5;
      gfx_rect(0, gfx_y, gfx_x, gfx_texth);
      gfx_g = gfx_b = 1;
      gfx_a = 1;
    );
    i += 1;
  );
);
