desc:Divisi Controller V1
slider1:1<1,7,1{1,2,3,4,5,6,7}>Min Notes in Chord
slider2:2<2,8,1{2,3,4,5,6,7,8}>Max Notes in Chord
slider3:24<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8}>Playing range (LOW)
slider4:96<0,127,1{C0,C#0,D0,D#0,E0,F0,F#0,G0,G#0,A0,A#0,B0,C1,C#1,D1,D#1,E1,F1,F#1,G1,G#1,A1,A#1,B1,C2,C#2,D2,D#2,E2,F2,F#2,G2,G#2,A2,A#2,B2,C3,C#3,D3,D#3,E3,F3,F#3,G3,G#3,A3,A#3,B3,C4,C#4,D4,D#4,E4,F4,F#4,G4,G#4,A4,A#4,B4,C5,C#5,D5,D#5,E5,F5,F#5,G5,G#5,A5,A#5,B5,C6,C#6,D6,D#6,E6,F6,F#6,G6,G#6,A6,A#6,B6,C7,C#7,D7,D#7,E7,F7,F#7,G7,G#7,A7,A#7,B7,C8,C#8,D8,D#8,E8,F8,F#8,G8,G#8,A8,A#8,B8}>Playing range (HIGH)

slider10:1<1,1616,1><><><><><> Midi Channel
slider11:1<1,10,1>Chord Note #
slider12:0<-36,36,1>Note Translation
slider13:2<1,1616,1><><><><><> Midi Channel
slider14:2<1,10,1>Chord Note #
slider15:0<-36,36,1>Note Translation
slider16:3<1,1616,1><><><><><> Midi Channel
slider17:3<1,10,1>Chord Note #
slider18:0<-36,36,1>Note Translation
slider19:4<1,1616,1><><><><><> Midi Channel
slider20:0<1,10,1>Chord Note #
slider21:0<-36,36,1>Note Translation
slider22:5<1,1616,1><><><><><> Midi Channel
slider23:0<1,10,1>Chord Note #
slider24:0<-36,36,1>Note Translation
slider25:6<1,1616,1><><><><><> Midi Channel
slider26:0<1,10,1>Chord Note #
slider27:0<-36,36,1>Note Translation
slider28:7<1,1616,1><><><><><> Midi Channel
slider29:0<1,10,1>Chord Note #
slider30:0<-36,36,1>Note Translation
slider31:8<1,1616,1><><><><><> Midi Channel
slider32:0<1,10,1>Chord Note #
slider33:0<-36,36,1>Note Translation
slider34:9<1,1616,1><><><><><> Midi Channel
slider35:0<1,10,1>Chord Note #
slider36:0<-36,36,1>Note Translation
slider37:10<1,1616,1><><><><><> Midi Channel
slider38:0<1,10,1>Chord Note #
slider39:0<-36,36,1>Note Translation
slider40:11<1,1616,1><><><><><> Midi Channel
slider41:0<1,10,1>Chord Note #
slider42:0<-36,36,1>Note Translation
slider43:12<1,1616,1><><><><><> Midi Channel
slider44:0<1,10,1>Chord Note #
slider45:0<-36,36,1>Note Translation
slider46:13<1,1616,1><><><><><> Midi Channel
slider47:0<1,10,1>Chord Note #
slider48:0<-36,36,1>Note Translation
slider49:14<1,1616,1><><><><><> Midi Channel
slider50:0<1,10,1>Chord Note #
slider51:0<-36,36,1>Note Translation
slider52:15<1,1616,1><><><><><> Midi Channel
slider53:0<1,10,1>Chord Note #
slider54:0<-36,36,1>Note Translation
slider55:16<1,1616,1><><><><><> Midi Channel
slider56:0<1,10,1>Chord Note #
slider57:0<-36,36,1>Note Translation

@slider
min_notes = slider1 + 1;
max_notes = slider2 + 2;
low_note = slider3;
high_note = slider4;

i=0;
while (i < num_params) (
  chord_note_channel[i] = ((slider(10+i*3)/100 - 1) << 4) + (slider(10+i*3) % 100 -1);
  chord_note[i] = slider(11+i*3);
  chord_note_translation[i] = slider(12+i*3);
  i += 1;
);

@init
ext_midi_bus = 1.0;


// constants for the various states
st_zero = 0;
st_min_notes = 1;
st_max_notes = 2;
st_over = 4;

// notelist[0-127] contains the list of notes playing or collected, using 11 as
// a 'new note' indicator. Otherwise, it stores the note number of the chord
// being played, from 1 to num_notes.

notelist = 0;

// number of notes on
num_notes = 0;


// There are 16 sets of sliders/parameter blocks
num_params = 16;

// UI settings are stored in these arrays
chord_note = 200;
chord_note_channel = chord_note + num_params;
chord_note_translation = chord_note_channel + num_params;

function _log(val1, val2) local(old) (
  old = midi_bus;
  midi_bus = 15;
  midisend(0, $x80, val1, val2);
  midi_bus = old;
);

function handle_chord_note(cmd, offset, chord_note_id, note, vel) local (i) (
  i = 0;
  while (i < num_params) (
    chord_note[i] == chord_note_id ? (
      midi_bus = chord_note_channel[i] >> 4;
      midisend(offset, cmd + (chord_note_channel[i] & 15), note+chord_note_translation[i], vel);
    );
    i+=1;
  );
);

function note_on(new_note) (
  notelist[new_note] = 11;
  num_notes +=1;
);

function note_off(offset, note) (
  // if the note was sounding then turn it off
  notelist[note] < 11 ? (
    handle_chord_note($x80, offset, notelist[note], note, 0);
  );
  notelist[note] = 0;
  num_notes -=1 ;
);

function play_chord(offset, vel) local (chord_note, i ) (
  i = 0;
  chord_note = 1;
  while (
     // handle a note, which if it's new (11) means 
     // turning it on as well, and assigning it
     // the current chord_note value1
     notelist[i] != 0 ? (
       notelist[i] == 11 ? ( 
         handle_chord_note($x90, offset, chord_note, i, vel);
       ) : notelist[i] != chord_note ? (
         // note is already sounding in another position (channel),
         // we need to move it by turning it off and back
         // on in the new position/channel.
         handle_chord_note($x80, offset, notelist[i], i, vel);
         handle_chord_note($x90, offset, chord_note, i, vel);
       );
       notelist[i] = chord_note;
       chord_note += 1;
     );
     i += 1;
     chord_note < max_notes + 1 && i < 128  ;
  );
);

function is_note_on(msg1, msg2, msg3) (
  (msg1 == $x90 && msg3 > 0) ? (
    note_on(msg2);
    1;
  ) : 0;
);

function is_note_off(msg1, msg2, msg3) (
  ((msg1 == $x90 && msg3 == 0) || (msg1==$x80)) ? (
    note_off(offset, msg2);
    1;
  ) : 0;
);  
 
// state functions. These return the next state to advance to.

function zero(offset, msg1, msg2, msg3) (
  
  handled = is_note_on(msg1, msg2, msg3);
  !handled ? handled = is_note_off(msg1, msg2, msg3);
  
  num_notes == max_notes ? (
    play_chord(offset, 100);
    st_max_notes;
  ) : num_notes == min_notes ? (
    play_chord(offset, 100);
    st_min_notes;
  ) : st_zero;
);

 
function min_notes(offset, msg1, msg2, msg3) (
  is_note_on(msg1, msg2, msg3) ? (
    play_chord(offset, 100);
    num_notes == max_notes ? st_max_notes : st_min_notes;
  ) : is_note_off(msg1, msg2, msg3) ? (
    num_notes == 0 ? st_zero : st_min_notes;
  );
);

function max_notes(offset, msg1, msg2, msg3) (
  new_state = st_max_notes;
  is_note_on(msg1, msg2, msg3) ? (
    num_notes > max_notes ? st_over : ( 
      play_chord(offset, 100);
      st_max_notes;
      );
  ) : is_note_off(msg1, msg2, msg3) ? (
    num_notes < max_notes ? st_min_notes : st_max_notes;
  );
);

// More notes are on than the max_notes
function over(offset, msg1, msg2, msg3) (
  is_note_off(msg1, msg2, msg3) ? (
    num_notes == max_notes ? (
      play_chord(offset, 100);
      st_max_notes;
    );
  ) : is_note_on(msg1, msg2, msg3) ? st_over;
);

function is_passthru_message(msg1) (
  msg1 == $xB0 || msg1 == $xC0 || msg1 == $x80 || msg1 == $x90;
);
  
function handle_control_messages(offset, msg1, msg2, msg3) local(chans,i) (
  i = 0;
  msg1masked = msg1 & $xF0;
  is_passthru_message(msg1masked) ? 
    while (i < num_params) (
      chord_note[i] ? (
        midi_bus = chord_note_channel[i] >> 4;
        midisend(offset, msg1masked+(chord_note_channel[i] & 15), msg2, msg3);
      );
      i+=1;
    ) : (
      midi_bus = 0;
      midisend(offset, msg1, msg2, msg3);
    );
);


state = st_zero;

@block
while (midirecv(offset, msg1, msg2, msg3)) (

  // Handle noteon/noteoff messages inside the state machine
  msg1 == $x80 || msg1 == $x90 && (msg2 >= low_note && msg2 <= high_note) ? (
    state = 
        state == st_zero ? zero(offset, msg1, msg2, msg3)
      : state == st_min_notes ? min_notes(offset, msg1, msg2, msg3) 
      : state == st_max_notes ? max_notes(offset, msg1, msg2, msg3) 
      : state == st_over ? over(offset, msg1, msg2, msg3);

  // control messages are multi-plexed out to the used channels
  ) : handle_control_messages(offset, msg1, msg2, msg3);
);
