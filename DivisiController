desc:Divisi Controller
slider1:1<1,7,1{1,2,3,4,5,6,7}>Min Notes in Chord
slider2:2<2,8,1{2,3,4,5,6,7,8}>Max Notes in Chord

slider10:1<1,5,1>Midi Channel
slider11:1<1,10,1>Chord Note #
slider12:0<-36,36,1>Note Translation
slider13:2<1,5,1>Midi Channel
slider14:2<1,10,1>Chord Note #
slider15:0<-36,36,1>Note Translation
slider16:3<1,5,1>Midi Channel
slider17:3<1,10,1>Chord Note #
slider18:0<-36,36,1>Note Translation
slider19:4<1,5,1>Midi Channel
slider20:0<1,10,1>Chord Note #
slider21:0<-36,36,1>Note Translation
slider22:5<1,5,1>Midi Channel
slider23:0<1,10,1>Chord Note #
slider24:0<-36,36,1>Note Translation
slider25:6<1,5,1>Midi Channel
slider26:0<1,10,1>Chord Note #
slider27:0<-36,36,1>Note Translation
slider28:7<1,5,1>Midi Channel
slider29:0<1,10,1>Chord Note #
slider30:0<-36,36,1>Note Translation
slider31:8<1,5,1>Midi Channel
slider32:0<1,10,1>Chord Note #
slider33:0<-36,36,1>Note Translation
slider34:9<1,5,1>Midi Channel
slider35:0<1,10,1>Chord Note #
slider36:0<-36,36,1>Note Translation
slider37:10<1,5,1>Midi Channel
slider38:0<1,10,1>Chord Note #
slider39:0<-36,36,1>Note Translation
slider40:11<1,5,1>Midi Channel
slider41:0<1,10,1>Chord Note #
slider42:0<-36,36,1>Note Translation
slider43:12<1,5,1>Midi Channel
slider44:0<1,10,1>Chord Note #
slider45:0<-36,36,1>Note Translation
slider46:13<1,5,1>Midi Channel
slider47:0<1,10,1>Chord Note #
slider48:0<-36,36,1>Note Translation
slider49:14<1,5,1>Midi Channel
slider50:0<1,10,1>Chord Note #
slider51:0<-36,36,1>Note Translation
slider52:15<1,5,1>Midi Channel
slider53:0<1,10,1>Chord Note #
slider54:0<-36,36,1>Note Translation
slider55:16<1,5,1>Midi Channel
slider56:0<1,10,1>Chord Note #
slider57:0<-36,36,1>Note Translation

@slider
// create our data for the slider input values, there's 5 sliders
// so each block is 5 elements
i=0;

// This is a bitmap of the channels used by the configuration
channels_in_use = 0;
while (i < num_params) (
  chord_note_channel[i] = slider(10+i*3);
  chord_note[i] = slider(11+i*3);
  chord_note[i] ? channels_in_use |= 1 << chord_note_channel[i]-1;
  chord_note_translation[i] = slider(12+i*3);
  i += 1;
);


@init
st_zero = 0;
st_collect = 1;
st_play = 2;
st_under = 3;
st_over = 4;

// notelist[0-127] contains the list of notes playing, using
// 11 as a 'new note' indicator. Otherwise, it stores the note
// number of the chord being played, from 1 to num_notes.
notelist = 0;

// number of notes on
num_notes = 0;


num_params = 16;
chord_note = 200;
chord_note_channel = chord_note + num_params;
chord_note_translation = chord_note_channel + num_params;

min_notes = slider1 + 1;
max_notes = slider2 + 2;


// Helpful functions

function handle_chord_note(cmd, offset, chord_note_id, note, vel) local (i) (
  i = 0;
  while (i < num_params) (
    chord_note[i] == chord_note_id ? 
      midisend(offset, (cmd-1)+chord_note_channel[i], note+chord_note_translation[i], vel);
    i+=1;
  );
);

function note_on(new_note) (
  notelist[new_note] = 11;
  num_notes +=1;
);

function note_off(offset, note) (
  // if the note was sounding then turn it off
  notelist[note] < 11 ? (
    //midisend(offset, $x7F+notelist[note], note, 0);
    handle_chord_note($x80, offset, notelist[note], note, 0);
  );
  notelist[note] = 0;
  num_notes -=1 ;
);

function _log(val) (
  midisend(0, $x80, val);
);

function play_chord(offset, vel) local (chord_note, i ) (
  i = 0;
  chord_note = 1;
  while (
     // handle a note, which if it's new (11) means 
     // turning it on as well, and assigning it
     // the current chord_note value1
     notelist[i] != 0 ? (
       notelist[i] == 11 ? ( 
         //midisend(offset, $x8F+chord_note, i, vel);
         handle_chord_note($x90, offset, chord_note, i, vel);
       ) : notelist[i] != chord_note ? (
         // note is already sounding in another position (channel),
         // we need to move it by turning it off and back
         // on in the new position/channel.
         //midisend(offset, $x7F+notelist[i], i, 0);
         handle_chord_note($x80, offset, notelist[i], i, vel);
         //midisend(offset, $x8F+chord_note, i, vel);
         handle_chord_note($x90, offset, chord_note, i, vel);
       );
       notelist[i] = chord_note;
       chord_note += 1;
     );
     i += 1;
     chord_note < max_notes + 1 && i < 128  ;
  );
);

function is_note_on(msg1, msg2, msg3) (
  (msg1 == $x90 && msg3 > 0) ? (
    note_on(msg2);
    1;
  ) : 0;
);

function is_note_off(msg1, msg2, msg3) (
  ((msg1 == $x90 && msg3 == 0) || (msg1==$x80)) ? (
    note_off(offset, msg2);
    1;
  ) : 0;
);  
 
// state functions. These return the next state to advance to.

function zero(offset, msg1, msg2, msg3) (
  
  new_state = st_zero;
  handled = is_note_on(msg1, msg2, msg3);
  !handled ? handled = is_note_off(msg1, msg2, msg3);
  
  num_notes == min_notes ? (
    play_chord(offset, 100);
    new_state = st_play;
  );
  new_state;
);

 
function play(offset, msg1, msg2, msg3) (

  new_state = st_play;
  handled = 0;
  // Note-on event
  
  is_note_on(msg1, msg2, msg3) ? (
    handled = 1;
    new_state = num_notes > max_notes ? st_over : ( 
      play_chord(offset, 100);
      st_play;
      );
  );
  
  // Note-off event
  is_note_off(msg1, msg2, msg3) ? (
    handled = 1;
    new_state = num_notes < min_notes ? st_under : st_play;
  );
  new_state;
);

// More notes are on than the min_notes
function over(offset, msg1, msg2, msg3) (
  is_note_off(msg1, msg2, msg3) ? (
    num_notes == max_notes ? (
      play_chord(offset, 100);
      st_play;
    );
  ) : is_note_on(msg1, msg2, msg3) ? st_over;
);

// Fewer than min_notes are currently on
function under(offset, msg1, msg2, msg3) (
  is_note_on(msg1, msg2, msg3) ? (
    num_notes == min_notes ?  (
      play_chord(offset, 100);
      st_play;
    ) : st_under;
  ) : is_note_off(msg1, msg2, msg3) ? (
      num_notes == 0 ? st_zero : st_under;
  );
);

function handle_control_messages(offset, msg1, msg2, msg3) local(chans,i) (
  chans = channels_in_use;
  i = 0;
  msg1 == $xB0 ? 
    while (chans) (
      chans & 1 ? midisend(offset, $xB0+i, msg2, msg3);
      i+=1;
      chans = chans >> 1;
    ) : midisend(offset, msg1, msg2, msg3);
);


state = st_zero;

@block
while (midirecv(offset, msg1, msg2, msg3)) (

  // Handle noteon/noteoff messages inside the state machine
  msg1 == $x80 || msg1 == $x90 ? (
    state = 
        state == st_zero ? zero(offset, msg1, msg2, msg3)
      : state == st_play ? play(offset, msg1, msg2, msg3) 
      : state == st_over ? over(offset, msg1, msg2, msg3)
      : state == st_under ? under(offset, msg1, msg2, msg3);

  // control messages are multi-plexed out to the used channels
  ) : handle_control_messages(offset, msg1, msg2, msg3);
);
